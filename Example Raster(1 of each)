result = all16AdjSpikes;
figure;
hold on;

% Define colors
blue = [0 0 1]; % Color for 'D'
red = [1 0 0]; % Color for 'X'

% Find unique units for D and X lightCycles
D_units = unique(result.unitID(result.lightCycle == 'D'));
X_units = unique(result.unitID(result.lightCycle == 'X'));

% Randomly select 1 unit from each group (if fewer than 1, use all units)
rng('shuffle'); % Ensure randomness
D_units = D_units(randperm(length(D_units), min(1, length(D_units))));
X_units = X_units(randperm(length(X_units), min(1, length(X_units))));

% Combine the units, only D and X in this case
combinedUnits = [D_units; X_units];
countUnits = length(combinedUnits) + 1;

% Loop through combined units and plot
for i = 1:length(combinedUnits)
    unitRows = result.unitID == combinedUnits(i);
    unitTimestamp = result.adjustedTimestamp(unitRows) / 60; % Convert to minutes
    lightCycle = result.lightCycle(find(unitRows, 1, 'first')); % Get the lightCycle value for this unit
    
    % Determine the color based on the lightCycle
    if lightCycle == 'D'
        color = blue;
    elseif lightCycle == 'X'
        color = red;
    end
    
    scatter(unitTimestamp, ones(size(unitTimestamp)) * i, 1000, color, 'Marker', '|', 'SizeData', 20);
end

% Plot vertical lines after scatter plots to bring them to the front
line([15,15], [1,countUnits], 'Color', 'k', 'LineWidth', 1.5);
line([20,20], [1,countUnits], 'Color', 'k', 'LineWidth', 1.5);
line([45,45], [1,countUnits], 'Color', 'k', 'LineWidth', 1.5);

xMin = 0;
xMax = 50;

xlim([xMin, xMax]);

xlabel('Time(min)');
ylabel('Unit');
%title('Neuron Firing Across Time');

yticks(1:length(combinedUnits));
yticklabels(arrayfun(@num2str, combinedUnits, 'UniformOutput', false));
set(gca, 'YDir', 'reverse');

% Set the y-axis limit to match the actual number of units plotted
ylim([1, countUnits - 1]); % Adjust countUnits - 1 to avoid extra space

ax = gca; % Get current axes
ax.Position(2) = ax.Position(2) - 0.02; % Move the entire axes up

hold off;
